package util;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;

public class SnippetGenerator {
	
	private static SnippetGenerator inst;
	
	private SnippetGenerator(){}
	
	private static SnippetGenerator instance(){
		if(inst == null){
			inst = new SnippetGenerator();
		}
		return inst;
	}
	
	public static Map<String, String> generateSnippet(ArrayList<String> fileNames){
		return instance()._generateSnippet(fileNames);
	}
	
	private Map<String, String> _generateSnippet(ArrayList<String> fileNames){
		for(String fileName : fileNames){
			File file = new File(fileName);
			//TODO: implement right here
		}
		
		return new TreeMap<String, String>();
	}
	
	private ArrayList<String> parseSentences(File file){
		BufferReader reader = new BufferReader(file);
	}
	
	private void densityMeasure(File file){
		
	}
	
	private void longestContiguousRun(File file){
		
	}
	
	private void numberOfUniqueQueryTerms(File file){
		
	}
	
	private void totalNumberOfQueryTerms(File file){
		
	}
	
	private void firstOrSecondLine(File file){
		
	}
	
	private void heading(File file){
		
	}
	
	private void makeHtmlDocRequest(){
		HttpURLConnection connection = null;
		try {
			URL url = new URL("http://us.blizzard.com/en-us/");
			connection = (HttpURLConnection)url.openConnection();
			connection.setRequestMethod("GET");

			InputStream is = connection.getInputStream();
			BufferedReader rd = new BufferedReader(new InputStreamReader(is));
			StringBuilder response = new StringBuilder();
			String line;
			
			while((line = rd.readLine()) != null){
				response.append(line);
				response.append('\r');
			}
			rd.close();
		} 
		catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch(IOException e){
			
		}
	}
}
