package mnb;

import java.io.FileNotFoundException;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import util.MathExt;

public class MNBClassification{

	private MDR training_set;
	private MDR test_set;

	private String[] M = {"all", "24800", "18600", "12400", "6200"};
	
	private DC documentCollection;


	public MNBClassification(){
		this.training_set = new MDR();
		this.test_set = new MDR();
		this.documentCollection = new DC(800, 200);
	}

	public void init(){
		try {
			this.documentCollection.init("20NG");
		} 
		catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	public void doClassification(){
		for(String m : M){
			if(!m.equals("all")){
				TreeSet<Feature> features = this.featureSelect(Integer.parseInt(m));
			}
			else{
				this.setUpTrainingSet();
			}
		}
	}

	public TreeSet<Feature> featureSelect(int m){
		TreeSet<Feature> features = new TreeSet<Feature>();
		Set<String> vocab = this.documentCollection.getVocab();
		Set<String> classNames = this.documentCollection.getClasses();
		
		for(String word : vocab){
			double score = 0.0;
			double summation1 = 0.0;
			double summation2 = 0.0;
			double summation3 = 0.0;
			
			for(String className : classNames){
				summation1 += this.PCollection(className) * MathExt.log2(this.PCollection(className));
			}
			
			summation1 *= -1.0;
			
			score = summation1 + (this.PWord(word) * summation2) + (this.PNotWord(word) * summation3);
		}
		
		return null;
	}

	public void setUpTrainingSet(){
		
	}

	public void setUpTestSet(){
		
	}
	// P(c)
	private double PCollection(String c){
		return (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingLabeled_C(c) / (double)this.documentCollection.getTotalNumberOfDocumentsInDC_Training();
	}
	
	// p(w)
	private double PWord(String w){
		return (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingWith_W(w) / (double)this.documentCollection.getTotalNumberOfDocumentsInDC_Training();
	}
	
	// p(!w)
	private double PNotWord(String w){
		return (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingWithout_W(w) / (double)this.documentCollection.getTotalNumberOfDocumentsInDC_Training();
	}
	
	// p(c|w)
	private double PCollectionWithWord(String c, String w){
		return (double)this.documentCollection.getNumberOfDocsInDC_TrainingWith_W_Labeled_C(c, w) / (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingWith_W(w);
	}
	
	// p(c|!w)
	private double PCollectionWithoutWord(String c, String w){
		return (double)this.documentCollection.getNumberOfDocsInDC_TrainingWithout_W_Labeled_C(c, w) / (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingWithout_W(w);
	}

	private class Feature implements Comparable{
		private int score;
		private String term;
		
		public Feature(String _term, double _score)
		{
			this.score = 0;
			this.term = _term;
		}

		public int getscore() {
			return score;
		}

		public String getTerm() {
			return term;
		}

		@Override
		public int compareTo(Object obj) {
			Feature doc = (Feature)obj;
			if(this.count == doc.getCount()){
				return 1;
			}
			else if(this.count > doc.getCount()){
				return -1;
			}
			return 1;
		}
	}
}
