package mnb;

import java.io.FileNotFoundException;
import java.util.TreeMap;
import java.util.TreeSet;

public class MNBClassification{

	private MDR training_set;
	private MDR test_set;

	private String[] M = {"all", "24800", "18600", "12400", "6200"};
	
	private DC documentCollection;


	public MNBClassification(){
		this.training_set = new MDR();
		this.test_set = new MDR();
		this.documentCollection = new DC(800, 200);
	}

	public void init(){
		try {
			this.documentCollection.init("20NG");
		} 
		catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	public void doClassification(){
		for(String m : M){
			if(!m.equals("all")){
				TreeSet<Feature> features = this.featureSelect(Integer.parseInt(m));
			}
			else{
				this.setUpTrainingSet();
			}
		}
	}

	public TreeSet<Feature> featureSelect(int m){
		TreeSet<Feature> features = new TreeSet<Feature>();
		
		
		return null;
	}

	public void setUpTrainingSet(){

	}

	public void setUpTestSet(){
		
	}
	
	private double PCollection(String className){
		return this.documentCollection.getNumberOfDocumentsInDC_TrainingLabeled_C(className)
	}

	private class Feature implements Comparable{
		private int count;
		private String term;
		
		public Feature(String _term)
		{
			this.count = 0;
			this.term = _term;
		}

		public int getCount() {
			return count;
		}

		public void addCount() {
			this.count++;
		}

		public String getTerm() {
			return term;
		}

		@Override
		public int compareTo(Object obj) {
			Feature doc = (Feature)obj;
			if(this.count == doc.getCount()){
				return 1;
			}
			else if(this.count > doc.getCount()){
				return -1;
			}
			return 1;
		}
	}
}
