package mnb;

import java.io.FileNotFoundException;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import util.MathExt;

public class MNBClassification{

	private MDR training_set;
	private MDR test_set;

	private String[] M = {"all", "24800", "18600", "12400", "6200"};
	
	private DC documentCollection;


	public MNBClassification(int upperBoundTraining, int upperBoundTest){
		this.training_set = new MDR();
		this.test_set = new MDR();
		this.documentCollection = new DC(upperBoundTraining, upperBoundTest);
	}

	public void init(String collectionDir){
		try {
			this.documentCollection.init(collectionDir);
		} 
		catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}

	public void doClassification(){
		for(String m : M){
			Map<String, Integer> features;
			if(!m.equals("all")){
				features = this.featureSelect(Integer.parseInt(m));	
			}
			else{
				features = new TreeMap<String, Integer>();
				for(String term : this.documentCollection.getDC_TrainingVocab()){
					features.put(term, 0);
				}
			}
			
			this.setUpTrainingSet(features);
			this.setUpTestSet(features);
		}
	}

	/**
	 * *************************************************************************************
	 * 									LABEL
	 * *************************************************************************************
	 * Assigns the most probable class for a particular document in test_set.
	 * In performing the classification task, you are required to use the getWordProbability and getClassProbability methods
	 * @param m
	 * @return
	 */
	public void label(){
		
	}
	
	/**
	 * *************************************************************************************
	 * 								FEATURE SELECT
	 * *************************************************************************************
	 * feature selection for the first mth terms in the DC_training found in the DC instance
	 * @param m
	 * @return
	 */
	public Map<String, Integer> featureSelect(int m){
		TreeSet<Feature> featureSet = new TreeSet<Feature>();
		
		// get list of all vocabulary from corpus
		Set<String> vocab = this.documentCollection.getDC_TrainingVocab();
		
		// get list of all classes in corpus
		Set<String> classNames = this.documentCollection.getClasses();
		
		// for each word w in the vocab
		for(String w : vocab){
			double score = 0.0;
			double summation1 = 0.0;
			double summation2 = 0.0;
			double summation3 = 0.0;
			
			// get all summations
			for(String c : classNames){
				summation1 += this.PCollection(c) * MathExt.log2(this.PCollection(c));
				summation2 += this.PCollectionWithWord(c, w) * MathExt.log2(this.PCollectionWithWord(c, w));
				summation3 += this.PCollectionWithoutWord(c, w) * MathExt.log2(this.PCollectionWithoutWord(c, w));
			}
			
			// get official score
			score = (-1.0 * summation1) + (this.PWord(w) * summation2) + (this.PNotWord(w) * summation3);
			
			// add features to structure
			featureSet.add(new Feature(w, score));
		}	
		
		// sub set the list of features till the mth position
		TreeMap<String, Integer> features = new TreeMap<String, Integer>();
		int count = 0;
		for(Feature feature : featureSet){
			if(count == m){
				break;
			}
			
			features.put(feature.term, 0);
			count++;
		}
		// return features
		return features;
	}
	
	private void setUpTrainingSet(Map<String, Integer> features){
		
		System.out.print("Making Training Set... \n");
		// get Class set
		Set<String> classNames = this.documentCollection.getClasses();
		
		// for each class in set
		for(String className : classNames){
			System.out.print("class: " + className + "\n");
			
			// get DC_Training Set
			Map<String, Map<String, Integer>> DC_Training_set = this.documentCollection.getDC_Training_Set(className);
			
			// for each docId in DC_Training_set
			for(String docId : DC_Training_set.keySet()){
				System.out.print("document: " + docId + "\n");
				
				// instantiate term Frequencies data structure
				Map<String, Integer> termFrequencies = new TreeMap<String, Integer>();
				System.out.print("HERE 1\n");
				// transfer features to term frequencies, which are all initialized to 0
				
				for(String term : features.keySet()){
					termFrequencies.put(new String(term), 0);
				}
				//termFrequencies.putAll(features);
				System.out.print("HERE 2\n");
				// initialize row for the document in the MNB model
				this.training_set.addDoc(docId, className, termFrequencies);
				System.out.print("HERE 3\n");
				
				// start filling in row
				Map<String, Integer> termsDC_Training_set = DC_Training_set.get(docId);
				System.out.print("HERE 4\n");
				
				// for each term in the document in the DC Training set
				for(String term : termsDC_Training_set.keySet()){
					// check to make sure the term is in the feature set
					if(features.containsKey(term)){
						System.out.print("term: " + term + "\n");
						// add term count to the document row
						this.training_set.addTermCount(docId, term, termsDC_Training_set.get(term));
					}
				}
			}
		}
		System.out.print("Finished Making Training Set \n");
	}

	private void setUpTestSet(Map<String, Integer> features){
		System.out.print("Making Test Set...");
		
		System.out.print("Finished Making Test Set \n");
	}
	
	// P(c)
	private double PCollection(String c){
		return (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingLabeled_C(c) / (double)this.documentCollection.getTotalNumberOfDocumentsInDC_Training();
	}
	
	// p(w)
	private double PWord(String w){
		return (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingWith_W(w) / (double)this.documentCollection.getTotalNumberOfDocumentsInDC_Training();
	}
	
	// p(!w)
	private double PNotWord(String w){
		return (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingWithout_W(w) / (double)this.documentCollection.getTotalNumberOfDocumentsInDC_Training();
	}
	
	// p(c|w)
	private double PCollectionWithWord(String c, String w){
		return (double)this.documentCollection.getNumberOfDocsInDC_TrainingWith_W_Labeled_C(c, w) / (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingWith_W(w);
	}
	
	// p(c|!w)
	private double PCollectionWithoutWord(String c, String w){
		return (double)this.documentCollection.getNumberOfDocsInDC_TrainingWithout_W_Labeled_C(c, w) / (double)this.documentCollection.getNumberOfDocumentsInDC_TrainingWithout_W(w);
	}

	/**
	 * WRAPPED CLASS FEATURE
	 */
	@SuppressWarnings("rawtypes")
	private class Feature implements Comparable{
		private double score;
		private String term;
		
		public Feature(String _term, double _score)
		{
			this.score = _score;
			this.term = _term;
		}

		public double getScore() {
			return score;
		}

		public String getTerm() {
			return term;
		}

		@Override
		public int compareTo(Object obj) {
			Feature doc = (Feature)obj;
			if(this.score == doc.getScore()){
				return 1;
			}
			else if(this.score > doc.getScore()){
				return -1;
			}
			return 1;
		}
	}
}
